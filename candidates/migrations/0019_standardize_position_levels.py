# Generated by Django 4.2.7 on 2025-10-10 22:51

from django.db import migrations


def standardize_position_levels(apps, schema_editor):
    """
    Migrate old position_level values to new standardized values.

    This fixes issue #26 where old values ('federal', 'provincial', 'local', 'ward')
    are mixed with new values ('house_of_representatives', 'provincial_assembly', etc.)

    Mapping:
    - 'federal' → 'house_of_representatives' (House of Representatives is the main federal body)
    - 'provincial' → 'provincial_assembly' (Provincial Assembly members)
    - 'local' → 'mayor_chairperson' (default for local level executive)
    - 'ward' → 'ward_chairperson' (default for ward level positions)
    - 'local_executive' → 'mayor_chairperson' (standardize to current naming)
    """
    Candidate = apps.get_model('candidates', 'Candidate')

    # Mapping of old values to new values
    migrations_map = {
        'federal': 'house_of_representatives',
        'provincial': 'provincial_assembly',
        'local': 'mayor_chairperson',
        'ward': 'ward_chairperson',
        'local_executive': 'mayor_chairperson',
    }

    # Track migrations for logging
    migration_count = 0

    for old_value, new_value in migrations_map.items():
        count = Candidate.objects.filter(position_level=old_value).update(position_level=new_value)
        if count > 0:
            migration_count += count
            print(f"  ✓ Migrated {count} candidate(s) from '{old_value}' to '{new_value}'")

    print(f"\n  Total candidates migrated: {migration_count}")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration - restore old values.

    Note: This is a best-effort reverse. We can't distinguish between candidates that were
    originally 'federal' vs those that were always 'house_of_representatives', so we keep
    the new values. This reverse is mainly for schema consistency.
    """
    # We don't reverse the data migration as it could cause inconsistency
    # The new values are the correct standard going forward
    print("  Note: Data migration reverse skipped - new values are the standard")
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('candidates', '0018_add_optimized_status_created_name_index'),
    ]

    operations = [
        migrations.RunPython(standardize_position_levels, reverse_migration),
    ]
